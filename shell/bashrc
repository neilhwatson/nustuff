export EDITOR=vim
set -o vi
bind -m vi-insert "\C-l":clear-screen

export LIBVIRT_DEFAULT_URI=qemu:///system
export ANSIBLE_STDOUT_CALLBACK=yaml

NO_COLOR='\[\e[0m\]'
WHITE='\[\e[1;37m\]'
BLACK='\[\e[0;30m\]'
BLUE='\[\e[0;34m\]'
LIGHT_BLUE='\[\e[1;34m\]'
GREEN='\e[0;32m'
LIGHT_GREEN='\[\e[1;32m\]'
CYAN='\[\e[0;36m\]'
LIGHT_CYAN='\[\e[1;36m\]'
RED='\[\e[0;31m\]'
LIGHT_RED='\[\e[1;31m\]'
PURPLE='\[\e[0;35m\]'
LIGHT_PURPLE='\[\e[1;35m\]'
BROWN='\[\e[0;33m\]'
YELLOW='\[\e[1;33m\]'
GRAY='\[\e[0;30m\]'
LIGHT_GRAY='\[\e[0;37m\]'

_prompt_command() {
   local exit=$?

   history -a

   local NO_COLOR='\[\e[0m\]'
   local WHITE='\[\e[1;37m\]'
   local BLACK='\[\e[0;30m\]'
   local BLUE='\[\e[0;34m\]'
   local LIGHT_BLUE='\[\e[1;34m\]'
   local GREEN='\[\e[0;32m\]'
   local LIGHT_GREEN='\[\e[1;32m\]'
   local CYAN='\[\e[0;36m\]'
   local LIGHT_CYAN='\[\e[1;36m\]'
   local RED='\[\e[0;31m\]'
   local LIGHT_RED='\[\e[1;31m\]'
   local PURPLE='\[\e[0;35m\]'
   local LIGHT_PURPLE='\[\e[1;35m\]'
   local BROWN='\[\e[0;33m\]'
   local YELLOW='\[\e[1;33m\]'
   local GRAY='\[\e[0;30m\]'
   local LIGHT_GRAY='\[\e[0;37m\]'


   PS_BASE="${NO_COLOR}\u@${GREEN}\w"
   if (($exit))
   then
      PSX="$PS_BASE ${RED} ╯°□°）╯︵ ┻━┻ ${exit}"
   else
      PSX="$PS_BASE ${GREEN}${exit}"
   fi

   PS1="$PSX${NO_COLOR} \\$ ${GREEN}"
   PS0="${NO_COLOR}"
}
export PROMPT_COMMAND='_prompt_command'

colorized_prompt() {
   # Check if last command exit code equals 0
   local exit=$?

   if $exit; then
      printf "${RED} ╯°□°）╯︵ ┻━┻ ${exit}"
   else
      printf "${GREEN}${exit}"
   fi
}
# export PS1="${NO_COLOR}\u@${GREEN}\w${NO_COLOR} \$(colorized_prompt) \\$"
# export PS1="\$(colorized_prompt) "
# export PS1="${NO_COLOR}\u@${GREEN}\w${$NO_COLOR} $(colorized_prompt) \\$ "
# export PS1='\[\e[37m\]\u\[\e[m\]@\[\e[32m\]\w\[\e[m\] $(colorized_prompt) '
# export PS1='[\t] \W $(colorized_prompt) '
# export PS1="\[\e[37m\]\u\[\e[m\]@\[\e[32m\]\w\[\e[m\]\\$ "

# history
shopt -s histappend
shopt -s cmdhist
HISTFILESIZE=1000000
HISTSIZE=1000000
HISTCONTROL=ignoreboth
HISTIGNORE='ls:bg:fg:history'
HISTTIMEFORMAT='%F %T '
# PROMPT_COMMAND='history -a'


export PATH=~/bin:$PATH

# Useful shell fucntions:

mdr() {
   pandoc $1 | lynx -stdin -dump
}

##########
# Docker #
##########

alias dockerr='docker run --rm -it'

#### Stop all running containers
docker-kill () {
   docker kill $(docker ps -q)
}

#### Remove all containers
docker-remove () {
   docker rm $(docker ps -a -q)
}

#### Remove all images
docker-remove-images () {
   if [[ $1 == 'force' ]]
   then
      force='--force'
   else
      force=''
   fi

   docker rmi $force $(curl -s --unix-socket /run/docker.sock \
      http://docker/images/json?all=1|jq -r '.[].Id')
}

#######
# vim #
#######

#### Open in existing gvim
# gvimr () {
#     local args="$*"
#     gvim --remote-silent $args
# }
# alias gvimr='gvim --remote-silent'
# alias gvimo='gvim -O'

#####################
# Monitor switching #
#####################
if [[ $HOSTNAME == 'luna' ]]
then
   alias monitor-home='xrandr --output eDP-1 --off --output HDMI-2 --mode 3840x2160'
   alias monitor-laptop='xrandr --output eDP-1 --mode 2560x1600 --output HDMI-2 --off'
fi

#######
# ssh #
#######
sskey() {
   local time=${1:-4h}
   ssh-agent -k 2>/dev/null
   eval $(ssh-agent -t $time)
   ssh-add
}

rkey(){
   ssh-keygen -f "/home/neil/.ssh/known_hosts" -R orion.watson-wilson.ca
}
if [ -f $(command -v keychain) ]
then
   eval $(keychain --nogui --noask --eval --quiet ~/.ssh/id_rsa)
fi

###########
# git-fzf #
###########
is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

gf() {
  is_in_git_repo &&
    git -c color.status=always status --short |
    fzf --height 40% -m --ansi --nth 2..,.. | awk '{print $2}'
}

gb() {
  is_in_git_repo &&
    git branch -a -vv --color=always | grep -v '/HEAD\s' |
    fzf --height 40% --ansi --multi --tac | sed 's/^..//' | awk '{print $1}' |
    sed 's#^remotes/[^/]*/##'
}

bind '"\er": redraw-current-line'
bind '"\C-g\C-f": "$(gf)\n\er"'
bind '"\C-g\C-b": "$(gb)\n\er"'
# bind '"\C-g\C-b": "$(gb)\n\e\C-e\er"'

########
# misc #
########
ch() {
   curl -s cheat.sh/$1
}

weather() {
   local location=$1

   case $location in

      markham)
         curl wttr.in/~markham+ontario+canada
         ;;
      cottage|brighton)
         curl wttr.in/~presquile+point+ontario+canada
         ;;
      *)
         curl wttr.in
         ;;

   esac
}
alias journal='vim ~/neil/docs/journal/$(date +%Y).txt'

alias tableflip='echo "(╯°□°）╯︵ ┻━┻"'
alias shrug='echo "¯\_(ツ)_/¯"'
alias bear='echo "ʕ •ᴥ•ʔ"'
alias kitty='echo "/ᐠ｡ꞈ｡ᐟ\\"'
alias whyyouno='echo "(ノಠ益ಠ)ノ"'

alias xc="xclip -selection CLIPBOARD"

alias update-calendar="cd ~/calendar; git commit -am 'update' \
   && git push origin master; cd \$OLDPWD"

export MANPAGER="vim -M +MANPAGER --not-a-term -"
# man() {
#     LESS_TERMCAP_md=$'\e[01;31m' \
#     LESS_TERMCAP_me=$'\e[0m' \
#     LESS_TERMCAP_se=$'\e[0m' \
#     LESS_TERMCAP_so=$'\e[01;44;33m' \
#     LESS_TERMCAP_ue=$'\e[0m' \
#     LESS_TERMCAP_us=$'\e[01;32m' \
#     command man "$@"
# }

#############
# Terraform #
#############

alias tfv='terraform validate'
alias tfp='terraform plan'
alias tfa='terraform apply'
alias tfi='terraform init'
export ARM_PROVIDER_STRICT=true

meme() {
   local image=$1
   local top=$2
   local bottom=$3
   local size=${4:-0} # added to 72

   echo size is $size
   convert $image -font impact -fill white -pointsize $((72+${size}))  \
      -stroke black -strokewidth 2 -gravity north -annotate 0 "$top" \
      -gravity south -annotate 0 "$bottom" meme.jpg
   tycat meme.jpg
}

anykey() {
   # Prevents laptop from sleeping
   while true
   do
      xdotool key shift
      sleep 239
   done
}

aws-setup() {
   complete -C aws_completer aws
}

vpn() {
   state=$1

   if [[ "$state" == 'on' ]]
   then
      # sudo ip link add dev core type wireguard
      sudo wg-quick up core
   elif [[ "$state" == 'off' ]]
   then
      sudo wg-quick down core
      # sudo ip link del dev core
   fi
}

hashicorp-upgrade (){
   local program=$1
   local version=$2

   (
      cd ~/tmp || return
      curl -s \
         https://releases.hashicorp.com/${program}/${version}/${program}_${version}_linux_amd64.zip \
         --output ${program}.zip || return
      unzip ${program}.zip || return 
      mv ${program} ~/bin/
      ${program} -version
   )
}

jslint() {
   file="$1"
   if [[ -e "$file" ]]
   then
      docker run -it --rm -v "$PWD":/work -w /work node:12 "npm run lint \"$file\""
   else
      echo error "$file" no found
      return 1
   fi
}

jlint() {

   local jenkinsfile=${1:-Jenkinsfile}
   local JENKINS_URL='http://jenkins.example.com'
   if [[ ! -r $jenkinsfile ]]
   then
      echo "Can't read $jenkinsfile"
      return 1
   fi

   # Assuming "anonymous read access" has been enabled on your Jenkins instance.
   curl -F "jenkinsfile=<$jenkinsfile" $JENKINS_URL/pipeline-model-converter/validate
}
